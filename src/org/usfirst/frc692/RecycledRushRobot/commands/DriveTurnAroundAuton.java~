// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycledRushRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc692.RecycledRushRobot.Robot;
import org.usfirst.frc692.RecycledRushRobot.RobotConstant;
import org.usfirst.frc692.RecycledRushRobot.RobotMap;

/**
 *
 */
public class  DriveTurnAroundAuton extends Command {

    public DriveTurnAroundAuton() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	while (RobotMap.driveTraingyro.getAngle() * RobotConstant.GyroMultiplier < 150)
    	{
    		Robot.driveTrain.takeJoystickValueGyro(0.0, 0.0, -0.4, 0.0);
    		SmartDashboard.putNumber("Gyro Angle for Auton:", RobotMap.driveTraingyro.getAngle() * RobotConstant.GyroMultiplier);
    	// turn 180
    	}
    	try {
			Thread.currentThread().sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	SmartDashboard.putNumber("Gyro Angle for Auton AFTER:", RobotMap.driveTraingyro.getAngle() * RobotConstant.GyroMultiplier);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
