// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycledRushRobot;

import org.usfirst.frc692.RecycledRushRobot.commands.AutonDrive;
import org.usfirst.frc692.RecycledRushRobot.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonTwoElevatorStop;
    public JoystickButton buttonTwoGathererGo;
    public JoystickButton buttonTwoGathererStop;
    public JoystickButton buttonThreeRollyGrabberReverse;
    public JoystickButton buttonFourCaterpillarBack;
    public JoystickButton buttonFourCaterpillarStop;
    public JoystickButton buttonFiveCaterpillarForward;
    public JoystickButton buttonThreeRollyGrabberStop;
    public JoystickButton buttonFiveCaterpillarStop;
    public JoystickButton buttonSevenCaterpillarStop;
    public JoystickButton buttonTenFlapping;
    public JoystickButton buttonElevenReverseFlapping;
    public Joystick manualStick;
    public JoystickButton buttonOnePoopTote;
    public JoystickButton buttonSixGatherOutWithSensor;
    public JoystickButton buttonSixStop;
    public JoystickButton buttonSevenGatherInWithSensor;
    public JoystickButton buttonSevenStop;
    public JoystickButton buttonTwoCaterpillarAndRollyGrabberEmergencyStop;
    public JoystickButton buttonTenStop;
    public JoystickButton buttonTenGathererAndCaterpillarIn;
    public JoystickButton buttonElevenStop;
    public JoystickButton buttonElevenCaterpillarAndGathererOut;
    public Joystick autoStick;
    public JoystickButton driveForward;
    public JoystickButton driveBackward;
    public JoystickButton driveLeft;
    public JoystickButton driveRight;
    public JoystickButton emergencyStop;
    public JoystickButton withoutGyroButton;
    public JoystickButton withGyro;
    public JoystickButton resetGy;
    public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveJoystick = new Joystick(2);
        
        resetGy = new JoystickButton(driveJoystick, 2);
        resetGy.whenPressed(new resetGyro());
        withGyro = new JoystickButton(driveJoystick, 6);
        withGyro.whenPressed(new DriveWithGyro());
        withoutGyroButton = new JoystickButton(driveJoystick, 4);
        withoutGyroButton.whenPressed(new DriveWithoutGyro());
        emergencyStop = new JoystickButton(driveJoystick, 10);
        emergencyStop.whenPressed(new DriveStopAuto());
        driveRight = new JoystickButton(driveJoystick, 12);
        driveRight.whileHeld(new driveRightAuton());
        driveLeft = new JoystickButton(driveJoystick, 11);
        driveLeft.whileHeld(new driveLeftAuton());
        driveBackward = new JoystickButton(driveJoystick, 3);
        driveBackward.whileHeld(new DriveBackwardAuto());
        driveForward = new JoystickButton(driveJoystick, 5);
        driveForward.whileHeld(new DriveForwardAuto());
        autoStick = new Joystick(0);
        
        buttonElevenCaterpillarAndGathererOut = new JoystickButton(autoStick, 11);
        buttonElevenCaterpillarAndGathererOut.whileHeld(new gatherOutAndCat());
        buttonElevenStop = new JoystickButton(autoStick, 11);
        buttonElevenStop.whenReleased(new caterpillarAndGathererStop());
        buttonTenGathererAndCaterpillarIn = new JoystickButton(autoStick, 10);
        buttonTenGathererAndCaterpillarIn.whileHeld(new gatherInAndCat());
        buttonTenStop = new JoystickButton(autoStick, 10);
        buttonTenStop.whenReleased(new caterpillarAndGathererStop());
        buttonTwoCaterpillarAndRollyGrabberEmergencyStop = new JoystickButton(autoStick, 2);
        buttonTwoCaterpillarAndRollyGrabberEmergencyStop.whenPressed(new caterpillarAndGathererStop());
        buttonSevenStop = new JoystickButton(autoStick, 7);
        buttonSevenStop.whenReleased(new caterpillarAndGathererStop());
        buttonSevenGatherInWithSensor = new JoystickButton(autoStick, 7);
        buttonSevenGatherInWithSensor.whileHeld(new gatherAndCaterpillarInWithSensor());
        buttonSixStop = new JoystickButton(autoStick, 6);
        buttonSixStop.whenReleased(new caterpillarAndGathererStop());
        buttonSixGatherOutWithSensor = new JoystickButton(autoStick, 6);
        buttonSixGatherOutWithSensor.whileHeld(new gatherAndCaterpillarOutWithSensor());
        buttonOnePoopTote = new JoystickButton(autoStick, 1);
        buttonOnePoopTote.whileHeld(new caterpillarManiualPoopTote());
        manualStick = new Joystick(1);
        
        buttonElevenReverseFlapping = new JoystickButton(manualStick, 11);
        buttonElevenReverseFlapping.whenPressed(new reverseFlap());
        buttonTenFlapping = new JoystickButton(manualStick, 10);
        buttonTenFlapping.whenPressed(new flapping());
        buttonSevenCaterpillarStop = new JoystickButton(manualStick, 7);
        buttonSevenCaterpillarStop.whenPressed(new caterpillarStop());
        buttonFiveCaterpillarStop = new JoystickButton(manualStick, 5);
        buttonFiveCaterpillarStop.whenReleased(new caterpillarStop());
        buttonThreeRollyGrabberStop = new JoystickButton(manualStick, 3);
        buttonThreeRollyGrabberStop.whenReleased(new rollyGrabberStop());
        buttonFiveCaterpillarForward = new JoystickButton(manualStick, 5);
        buttonFiveCaterpillarForward.whileHeld(new caterpillarForward());
        buttonFourCaterpillarStop = new JoystickButton(manualStick, 4);
        buttonFourCaterpillarStop.whenReleased(new caterpillarStop());
        buttonFourCaterpillarBack = new JoystickButton(manualStick, 4);
        buttonFourCaterpillarBack.whileHeld(new caterpillarBackward());
        buttonThreeRollyGrabberReverse = new JoystickButton(manualStick, 3);
        buttonThreeRollyGrabberReverse.whileHeld(new rollyGrabberReverse());
        buttonTwoGathererStop = new JoystickButton(manualStick, 2);
        buttonTwoGathererStop.whenReleased(new rollyGrabberStop());
        buttonTwoGathererGo = new JoystickButton(manualStick, 2);
        buttonTwoGathererGo.whileHeld(new rollyGrabbersGo());
        buttonTwoElevatorStop = new JoystickButton(manualStick, 2);
        buttonTwoElevatorStop.whenReleased(new elevatorStop());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("AutonGroup", new AutonGroup());

        SmartDashboard.putData("gatherAndCaterpillarInWithSensor", new gatherAndCaterpillarInWithSensor());

        SmartDashboard.putData("gatherAndCaterpillarOutWithSensor", new gatherAndCaterpillarOutWithSensor());

        SmartDashboard.putData("AutonDrive", new AutonDrive());

        SmartDashboard.putData("DriveTurnAroundAuton", new DriveTurnAroundAuton());

        SmartDashboard.putData("DriveTurnNinetyDegreesAuton", new DriveTurnNinetyDegreesAuton());

        SmartDashboard.putData("DriveWithGyro", new DriveWithGyro());

        SmartDashboard.putData("DriveWithoutGyro", new DriveWithoutGyro());

        SmartDashboard.putData("DriveBackwardAuto", new DriveBackwardAuto());

        SmartDashboard.putData("DriveForwardAuto", new DriveForwardAuto());

        SmartDashboard.putData("driveLeftAuton", new driveLeftAuton());

        SmartDashboard.putData("driveRightAuton", new driveRightAuton());

        SmartDashboard.putData("DriveStopAuto", new DriveStopAuto());

        SmartDashboard.putData("resetGyro", new resetGyro());

        SmartDashboard.putData("automatedElevator", new automatedElevator());

        SmartDashboard.putData("bringInToteOnCaterpillar", new bringInToteOnCaterpillar());

        SmartDashboard.putData("reverseFlap", new reverseFlap());

        SmartDashboard.putData("caterpillarStop", new caterpillarStop());

        SmartDashboard.putData("caterpillarBackward", new caterpillarBackward());

        SmartDashboard.putData("caterpillarControlWithJoystick", new caterpillarControlWithJoystick());

        SmartDashboard.putData("dispenseTotesAtGround", new dispenseTotesAtGround());

        SmartDashboard.putData("manualRecycleBinClaw", new manualRecycleBinClaw());

        SmartDashboard.putData("gatherTote", new gatherTote());

        SmartDashboard.putData("dropTrashCanAtZero", new dropTrashCanAtZero());

        SmartDashboard.putData("dropTrashCanAtOne", new dropTrashCanAtOne());

        SmartDashboard.putData("dropTrashCanAtTwo", new dropTrashCanAtTwo());

        SmartDashboard.putData("dropTrashCanAtThree", new dropTrashCanAtThree());

        SmartDashboard.putData("dropTrashCanAtFour", new dropTrashCanAtFour());

        SmartDashboard.putData("dropTrashCanAtFive", new dropTrashCanAtFive());

        SmartDashboard.putData("dropTrashCanAtSix", new dropTrashCanAtSix());

        SmartDashboard.putData("dispenseAtStep", new dispenseAtStep());

        SmartDashboard.putData("resetToteCycle", new resetToteCycle());

        SmartDashboard.putData("elevatorGoToStepLevel", new elevatorGoToStepLevel());

        SmartDashboard.putData("elevatorGoToGroundLevel", new elevatorGoToGroundLevel());

        SmartDashboard.putData("elevatorGoToTopLevel", new elevatorGoToTopLevel());

        SmartDashboard.putData("caterpillarForward", new caterpillarForward());

        SmartDashboard.putData("elevatorUpWithoutLimitSwitch", new elevatorUpWithoutLimitSwitch());

        SmartDashboard.putData("elevatorDownWithoutLimitSwitch", new elevatorDownWithoutLimitSwitch());

        SmartDashboard.putData("rollyGrabbersGo", new rollyGrabbersGo());

        SmartDashboard.putData("elevatorStop", new elevatorStop());

        SmartDashboard.putData("resetFlapper", new resetFlapper());

        SmartDashboard.putData("elevatorTakeJoystickValie", new elevatorTakeJoystickValie());

        SmartDashboard.putData("pickUpRecycleBin", new pickUpRecycleBin());

        SmartDashboard.putData("recycleBinClawOpen", new recycleBinClawOpen());

        SmartDashboard.putData("rollyGrabberReverse", new rollyGrabberReverse());

        SmartDashboard.putData("recycleBinClawBottom", new recycleBinClawBottom());

        SmartDashboard.putData("rollyGrabberTest", new rollyGrabberTest());

        SmartDashboard.putData("caterpillarManiualPoopTote", new caterpillarManiualPoopTote());

        SmartDashboard.putData("rollyGrabberControl", new rollyGrabberControl());

        SmartDashboard.putData("winchAtZeroTotes", new winchAtZeroTotes());

        SmartDashboard.putData("rollyGrabberStop", new rollyGrabberStop());

        SmartDashboard.putData("ermergencyStopCycle", new ermergencyStopCycle());

        SmartDashboard.putData("winchAtOneTote", new winchAtOneTote());

        SmartDashboard.putData("winchAtTwoTotes", new winchAtTwoTotes());

        SmartDashboard.putData("winchAtThreeTotes", new winchAtThreeTotes());

        SmartDashboard.putData("caterpillarAndGathererStop", new caterpillarAndGathererStop());

        SmartDashboard.putData("winchAtFourTotes", new winchAtFourTotes());

        SmartDashboard.putData("winchAtFiveTotes", new winchAtFiveTotes());

        SmartDashboard.putData("winchAtSixTotes", new winchAtSixTotes());

        SmartDashboard.putData("gatherOutAndCat", new gatherOutAndCat());

        SmartDashboard.putData("recycleBinClawUp", new recycleBinClawUp());

        SmartDashboard.putData("flapping", new flapping());

        SmartDashboard.putData("recycleBinClawClose", new recycleBinClawClose());

        SmartDashboard.putData("gatherInAndCat", new gatherInAndCat());

        SmartDashboard.putData("reverseCaterpillar", new reverseCaterpillar());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getmanualStick() {
        return manualStick;
    }

    public Joystick getautoStick() {
        return autoStick;
    }

    public Joystick getDriveJoystick() {
        return driveJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

