// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycledRushRobot;

import org.usfirst.frc692.RecycledRushRobot.commands.AutonDrive;
import org.usfirst.frc692.RecycledRushRobot.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonTwoGathererGo;
    public JoystickButton buttonTwoGathererStop;
    public JoystickButton buttonThreeRollyGrabberReverse;
    public JoystickButton buttonThreeRollyGrabberStop;
    public JoystickButton buttonTenFlapping;
    public JoystickButton buttonElevenReverseFlapping;
    public JoystickButton buttonSevenStepLevelStop;
    public Joystick manualStick;
    public JoystickButton buttonOnePoopTote;
    public JoystickButton buttonTwoCaterpillarAndRollyGrabberEmergencyStop;
    public JoystickButton buttonThreeTakeToteInAndElevator;
    public JoystickButton buttonFourPoopAtStep;
    public JoystickButton buttonSixGatherOutWithSensor;
    public JoystickButton buttonSixStop;
    public JoystickButton buttonSevenGatherInWithSensor;
    public JoystickButton buttonSevenStop;
    public JoystickButton buttonEightStack;
    public JoystickButton buttonNineUnloadTotes;
    public JoystickButton buttonTenGathererAndCaterpillarIn;
    public JoystickButton buttonTenStop;
    public JoystickButton buttonElevenCaterpillarAndGathererOut;
    public JoystickButton buttonElevenStop;
    public Joystick autoStick;
    public JoystickButton buttonTwoResetGyro;
    public JoystickButton buttonFourWithoutGyro;
    public JoystickButton buttonSixWithGyro;
    public JoystickButton buttonTenEmergencyStop;
    public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveJoystick = new Joystick(2);
        
        buttonTenEmergencyStop = new JoystickButton(driveJoystick, 10);
        buttonTenEmergencyStop.whenPressed(new DriveStopAuto());
        buttonSixWithGyro = new JoystickButton(driveJoystick, 6);
        buttonSixWithGyro.whenPressed(new DriveWithGyro());
        buttonFourWithoutGyro = new JoystickButton(driveJoystick, 4);
        buttonFourWithoutGyro.whenPressed(new DriveWithoutGyro());
        buttonTwoResetGyro = new JoystickButton(driveJoystick, 2);
        buttonTwoResetGyro.whenPressed(new resetGyro());
        autoStick = new Joystick(0);
        
        buttonElevenStop = new JoystickButton(autoStick, 11);
        buttonElevenStop.whenReleased(new caterpillarAndGathererStop());
        buttonElevenCaterpillarAndGathererOut = new JoystickButton(autoStick, 11);
        buttonElevenCaterpillarAndGathererOut.whileHeld(new gatherOutAndCat());
        buttonTenStop = new JoystickButton(autoStick, 10);
        buttonTenStop.whenReleased(new caterpillarAndGathererStop());
        buttonTenGathererAndCaterpillarIn = new JoystickButton(autoStick, 10);
        buttonTenGathererAndCaterpillarIn.whileHeld(new gatherInAndCat());
        buttonNineUnloadTotes = new JoystickButton(autoStick, 9);
        buttonNineUnloadTotes.whenPressed(new dispenseTotesAtGround());
        buttonEightStack = new JoystickButton(autoStick, 8);
        buttonEightStack.whenPressed(new automatedElevator());
        buttonSevenStop = new JoystickButton(autoStick, 7);
        buttonSevenStop.whenReleased(new caterpillarAndGathererStopCommand());
        buttonSevenGatherInWithSensor = new JoystickButton(autoStick, 7);
        buttonSevenGatherInWithSensor.whenPressed(new gatherAndCaterpillarInWithSensor());
        buttonSixStop = new JoystickButton(autoStick, 6);
        buttonSixStop.whenReleased(new caterpillarAndGathererStopCommand());
        buttonSixGatherOutWithSensor = new JoystickButton(autoStick, 6);
        buttonSixGatherOutWithSensor.whenPressed(new gatherAndCaterpillarOutWithSensor());
        buttonFourPoopAtStep = new JoystickButton(autoStick, 4);
        buttonFourPoopAtStep.whenPressed(new dispenseAtStep());
        buttonThreeTakeToteInAndElevator = new JoystickButton(autoStick, 3);
        buttonThreeTakeToteInAndElevator.whenPressed(new gatherTote());
        buttonTwoCaterpillarAndRollyGrabberEmergencyStop = new JoystickButton(autoStick, 2);
        buttonTwoCaterpillarAndRollyGrabberEmergencyStop.whenPressed(new caterpillarAndGathererStop());
        buttonOnePoopTote = new JoystickButton(autoStick, 1);
        buttonOnePoopTote.whileHeld(new caterpillarManiualPoopTote());
        manualStick = new Joystick(1);
        
        buttonSevenStepLevelStop = new JoystickButton(manualStick, 7);
        buttonSevenStepLevelStop.whileHeld(new StepLevelSwitch());
        buttonElevenReverseFlapping = new JoystickButton(manualStick, 11);
        buttonElevenReverseFlapping.whenPressed(new reverseFlap());
        buttonTenFlapping = new JoystickButton(manualStick, 10);
        buttonTenFlapping.whenPressed(new flapping());
        buttonThreeRollyGrabberStop = new JoystickButton(manualStick, 3);
        buttonThreeRollyGrabberStop.whenReleased(new rollyGrabberStop());
        buttonThreeRollyGrabberReverse = new JoystickButton(manualStick, 3);
        buttonThreeRollyGrabberReverse.whileHeld(new rollyGrabberReverse());
        buttonTwoGathererStop = new JoystickButton(manualStick, 2);
        buttonTwoGathererStop.whenReleased(new rollyGrabberStop());
        buttonTwoGathererGo = new JoystickButton(manualStick, 2);
        buttonTwoGathererGo.whileHeld(new rollyGrabbersGo());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("StepLevelSwitch", new StepLevelSwitch());

        SmartDashboard.putData("AutonGroup", new AutonGroup());

        SmartDashboard.putData("gatherAndCaterpillarInWithSensor", new gatherAndCaterpillarInWithSensor());

        SmartDashboard.putData("gatherAndCaterpillarOutWithSensor", new gatherAndCaterpillarOutWithSensor());

        SmartDashboard.putData("AutonDrive", new AutonDrive());

        SmartDashboard.putData("DriveTurnAroundAuton", new DriveTurnAroundAuton());

        SmartDashboard.putData("DriveTurnNinetyDegreesAuton", new DriveTurnNinetyDegreesAuton());

        SmartDashboard.putData("DriveWithGyro", new DriveWithGyro());

        SmartDashboard.putData("gatherInAndCatCommand", new gatherInAndCatCommand());

        SmartDashboard.putData("DriveWithoutGyro", new DriveWithoutGyro());

        SmartDashboard.putData("DriveBackwardAuto", new DriveBackwardAuto());

        SmartDashboard.putData("DriveForwardAuto", new DriveForwardAuto());

        SmartDashboard.putData("driveLeftAuton", new driveLeftAuton());

        SmartDashboard.putData("driveRightAuton", new driveRightAuton());

        SmartDashboard.putData("DriveStopAuto", new DriveStopAuto());

        SmartDashboard.putData("resetGyro", new resetGyro());

        SmartDashboard.putData("automatedElevator", new automatedElevator());

        SmartDashboard.putData("reverseFlap", new reverseFlap());

        SmartDashboard.putData("caterpillarStop", new caterpillarStop());

        SmartDashboard.putData("caterpillarBackward", new caterpillarBackward());

        SmartDashboard.putData("caterpillarControlWithJoystick", new caterpillarControlWithJoystick());

        SmartDashboard.putData("dispenseTotesAtGround", new dispenseTotesAtGround());

        SmartDashboard.putData("gatherTote", new gatherTote());

        SmartDashboard.putData("dispenseAtStep", new dispenseAtStep());

        SmartDashboard.putData("resetToteCycle", new resetToteCycle());

        SmartDashboard.putData("elevatorGoToStepLevel", new elevatorGoToStepLevel());

        SmartDashboard.putData("rollyGrabbersGo", new rollyGrabbersGo());

        SmartDashboard.putData("elevatorGoToGroundLevel", new elevatorGoToGroundLevel());

        SmartDashboard.putData("bringToteOnCaterpillarAndElevator", new bringToteOnCaterpillarAndElevator());

        SmartDashboard.putData("elevatorGoToTopLevel", new elevatorGoToTopLevel());

        SmartDashboard.putData("caterpillarForward", new caterpillarForward());

        SmartDashboard.putData("elevatorUpWithoutLimitSwitch", new elevatorUpWithoutLimitSwitch());

        SmartDashboard.putData("elevatorDownWithoutLimitSwitch", new elevatorDownWithoutLimitSwitch());

        SmartDashboard.putData("elevatorStop", new elevatorStop());

        SmartDashboard.putData("resetFlapper", new resetFlapper());

        SmartDashboard.putData("elevatorTakeJoystickValie", new elevatorTakeJoystickValie());

        SmartDashboard.putData("rollyGrabberReverse", new rollyGrabberReverse());

        SmartDashboard.putData("rollyGrabberTest", new rollyGrabberTest());

        SmartDashboard.putData("caterpillarManiualPoopTote", new caterpillarManiualPoopTote());

        SmartDashboard.putData("rollyGrabberControl", new rollyGrabberControl());

        SmartDashboard.putData("rollyGrabberStop", new rollyGrabberStop());

        SmartDashboard.putData("ermergencyStopCycle", new ermergencyStopCycle());

        SmartDashboard.putData("gatherOutAndCat", new gatherOutAndCat());

        SmartDashboard.putData("flapping", new flapping());

        SmartDashboard.putData("gatherInAndCat", new gatherInAndCat());

        SmartDashboard.putData("takeJoystickValueSlowDownUp", new takeJoystickValueSlowDownUp());

        SmartDashboard.putData("takeJoystickValueSlowDownDown", new takeJoystickValueSlowDownDown());

        SmartDashboard.putData("takeJoystickValueFastAndSlow", new takeJoystickValueFastAndSlow());

        SmartDashboard.putData("reverseCaterpillar", new reverseCaterpillar());

        SmartDashboard.putData("caterpillarAndGathererStopCommand", new caterpillarAndGathererStopCommand());

        SmartDashboard.putData("AutonMoveForward", new AutonMoveForward());

        SmartDashboard.putData("AutonDriveBackward", new AutonDriveBackward());

        SmartDashboard.putData("caterpillarAndGathererStop", new caterpillarAndGathererStop());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getmanualStick() {
        return manualStick;
    }

    public Joystick getautoStick() {
        return autoStick;
    }

    public Joystick getDriveJoystick() {
        return driveJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

