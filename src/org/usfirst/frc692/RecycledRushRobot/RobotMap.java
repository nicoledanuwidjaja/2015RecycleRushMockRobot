// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycledRushRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController caterpillarcaterpillarBelt;
    public static SpeedController caterpillarcaterpillarBeltTwo;
    public static DigitalInput gatherergathererToteDetectionLimit;
    public static DigitalInput elevatorelevatorLevelGroundLimit;
    public static DigitalInput elevatorelevatorLevelStepLimit;
    public static DigitalInput elevatorelevatorLevelTopLoadLimit;
    public static DoubleSolenoid elevatorflapperRelease;
    public static SpeedController elevatorelevatorPlatformUpDownMotor;
    public static Compressor pneumaticscompressorOne;
    public static SpeedController rollyGrabberrollyGrabberMotorOne;
    public static SpeedController rollyGrabberrollyGrabberMotorTwo;
    public static DigitalInput recycleBinClawrecycleBinDropLimit;
    public static Encoder recycleBinClawrecycleBinClawEncoder;
    public static DoubleSolenoid recycleBinClawrecycleBinClawOpenCloser;
    public static SpeedController recycleBinClawrecycleBinWinchMotor;
    public static SpeedController driveTrainleftFrontTalon0;
    public static SpeedController driveTrainleftBackTalon1;
    public static SpeedController driveTrainrightFrontTalon2;
    public static SpeedController driveTrainrightBackTalon3;
    public static RobotDrive driveTrainRobotDrive;
    public static Gyro driveTraingyro;
    public static Encoder driveTrainleftFrontEncoder;
    public static Encoder driveTrainleftBackEncoder;
    public static Encoder driveTrainrightFrontEncoder;
    public static Encoder driveTrainrightBackEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        caterpillarcaterpillarBelt = new TalonSRX(5);
        LiveWindow.addActuator("Caterpillar", "caterpillarBelt", (TalonSRX) caterpillarcaterpillarBelt);
        
        caterpillarcaterpillarBeltTwo = new TalonSRX(9);
        LiveWindow.addActuator("Caterpillar", "caterpillarBeltTwo", (TalonSRX) caterpillarcaterpillarBeltTwo);
        
        gatherergathererToteDetectionLimit = new DigitalInput(9);
        LiveWindow.addSensor("Gatherer", "gathererToteDetectionLimit", gatherergathererToteDetectionLimit);
        
        elevatorelevatorLevelGroundLimit = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "elevatorLevelGroundLimit", elevatorelevatorLevelGroundLimit);
        
        elevatorelevatorLevelStepLimit = new DigitalInput(2);
        LiveWindow.addSensor("Elevator", "elevatorLevelStepLimit", elevatorelevatorLevelStepLimit);
        
        elevatorelevatorLevelTopLoadLimit = new DigitalInput(3);
        LiveWindow.addSensor("Elevator", "elevatorLevelTopLoadLimit", elevatorelevatorLevelTopLoadLimit);
        
        elevatorflapperRelease = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Elevator", "flapperRelease", elevatorflapperRelease);
        
        elevatorelevatorPlatformUpDownMotor = new TalonSRX(4);
        LiveWindow.addActuator("Elevator", "elevatorPlatformUpDownMotor", (TalonSRX) elevatorelevatorPlatformUpDownMotor);
        
        pneumaticscompressorOne = new Compressor(0);
        
        
        rollyGrabberrollyGrabberMotorOne = new TalonSRX(7);
        LiveWindow.addActuator("RollyGrabber", "rollyGrabberMotorOne", (TalonSRX) rollyGrabberrollyGrabberMotorOne);
        
        rollyGrabberrollyGrabberMotorTwo = new TalonSRX(8);
        LiveWindow.addActuator("RollyGrabber", "rollyGrabberMotorTwo", (TalonSRX) rollyGrabberrollyGrabberMotorTwo);
        
        recycleBinClawrecycleBinDropLimit = new DigitalInput(4);
        LiveWindow.addSensor("RecycleBinClaw", "recycleBinDropLimit", recycleBinClawrecycleBinDropLimit);
        
        recycleBinClawrecycleBinClawEncoder = new Encoder(5, 6, false, EncodingType.k4X);
        LiveWindow.addSensor("RecycleBinClaw", "recycleBinClawEncoder", recycleBinClawrecycleBinClawEncoder);
        recycleBinClawrecycleBinClawEncoder.setDistancePerPulse(1.0);
        recycleBinClawrecycleBinClawEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        recycleBinClawrecycleBinClawOpenCloser = new DoubleSolenoid(1, 0, 1);      
        LiveWindow.addActuator("RecycleBinClaw", "recycleBinClawOpenCloser", recycleBinClawrecycleBinClawOpenCloser);
        
        recycleBinClawrecycleBinWinchMotor = new TalonSRX(6);
        LiveWindow.addActuator("RecycleBinClaw", "recycleBinWinchMotor", (TalonSRX) recycleBinClawrecycleBinWinchMotor);
        
        driveTrainleftFrontTalon0 = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "leftFrontTalon0", (VictorSP) driveTrainleftFrontTalon0);
        
        driveTrainleftBackTalon1 = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "leftBackTalon1", (VictorSP) driveTrainleftBackTalon1);
        
        driveTrainrightFrontTalon2 = new VictorSP(2);
        LiveWindow.addActuator("DriveTrain", "rightFrontTalon2", (VictorSP) driveTrainrightFrontTalon2);
        
        driveTrainrightBackTalon3 = new VictorSP(3);
        LiveWindow.addActuator("DriveTrain", "rightBackTalon3", (VictorSP) driveTrainrightBackTalon3);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainleftFrontTalon0, driveTrainleftBackTalon1,
              driveTrainrightFrontTalon2, driveTrainrightBackTalon3);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTraingyro = new Gyro(0);
        LiveWindow.addSensor("DriveTrain", "gyro", driveTraingyro);
        driveTraingyro.setSensitivity(0.0125);
        driveTrainleftFrontEncoder = new Encoder(11, 12, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "leftFrontEncoder", driveTrainleftFrontEncoder);
        driveTrainleftFrontEncoder.setDistancePerPulse(1.0);
        driveTrainleftFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainleftBackEncoder = new Encoder(13, 14, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "leftBackEncoder", driveTrainleftBackEncoder);
        driveTrainleftBackEncoder.setDistancePerPulse(1.0);
        driveTrainleftBackEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainrightFrontEncoder = new Encoder(15, 16, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "rightFrontEncoder", driveTrainrightFrontEncoder);
        driveTrainrightFrontEncoder.setDistancePerPulse(1.0);
        driveTrainrightFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainrightBackEncoder = new Encoder(17, 18, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "rightBackEncoder", driveTrainrightBackEncoder);
        driveTrainrightBackEncoder.setDistancePerPulse(1.0);
        driveTrainrightBackEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
